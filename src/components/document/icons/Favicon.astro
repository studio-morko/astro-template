---

type Icon = {
  path  : string;
  size? : number;
}

type Favicon = {
  ico?   : Icon;          // ICO icon
  png?   : Icon | Icon[]; // PNG icons
  svg?   : Icon;          // SVG icon
  apple? : Icon;          // Apple touch icon
}

interface Props {
  icons: {
    default?   : Favicon; // Default icons
    lightMode? : Favicon; // Light mode icons
    darkMode?  : Favicon; // Dark mode icons
  };
  manifest? : string;     // Web manifest path
}

const { icons, manifest } = Astro.props;

// Helper to format size
const size = (s?: number) => s ? `${s}x${s}` : undefined;

// Generate a random ID for cache busting
const randomId = Math.random().toString(36).substring(2, 15);

// Helper to add random ID for cache busting
const href = (path: string) => `${path}?v=${randomId}`;

---

{/* Web Manifest */}
{manifest && <link rel="manifest" href={manifest} />}

{/* Default ICO */}
{icons.default?.ico && 
  <link 
    rel   = "icon"
    type  = "image/x-icon"
    href  = {href(icons.default.ico.path)}
    sizes = {size(icons.default.ico.size)}
  />
}

{/* Default SVG */}
{icons.default?.svg && 
  <link 
    rel   = "icon"
    type  = "image/svg+xml"
    href  = {href(icons.default.svg.path)}
    sizes = {size(icons.default.svg.size)}
  />
}

{/* Default PNGs */}
{icons.default?.png && (Array.isArray(icons.default.png) 
  ? icons.default.png : [icons.default.png]).map(png => 
  <link 
    rel   = "icon"
    type  = "image/png"
    href  = {href(png.path)}
    sizes = {size(png.size)}
  />
)}

{/* Apple Touch Icon */}
{icons.default?.apple && 
  <link 
    rel   = "apple-touch-icon"
    href  = {href(icons.default.apple.path)}
    sizes = {size(icons.default.apple.size)}
  />
}

{/* Light Mode ICO */}
{icons.lightMode?.ico && 
  <link 
    rel   = "icon"
    type  = "image/x-icon"
    href  = {href(icons.lightMode.ico.path)}
    sizes = {size(icons.lightMode.ico.size)}
    media = "(prefers-color-scheme: light)"
  />
}

{/* Light Mode SVG */}
{icons.lightMode?.svg && 
  <link 
    rel   = "icon"
    type  = "image/svg+xml"
    href  = {href(icons.lightMode.svg.path)}
    sizes = {size(icons.lightMode.svg.size)}
    media = "(prefers-color-scheme: light)"
  />
}

{/* Light Mode PNGs */}
{icons.lightMode?.png && (Array.isArray(icons.lightMode.png) 
  ? icons.lightMode.png : [icons.lightMode.png]).map(png => 
  <link 
    rel   = "icon"
    type  = "image/png"
    href  = {href(png.path)}
    sizes = {size(png.size)}
    media = "(prefers-color-scheme: light)"
  />
)}

{/* Dark Mode ICO */}
{icons.darkMode?.ico && 
  <link 
    rel   = "icon"
    type  = "image/x-icon"
    href  = {href(icons.darkMode.ico.path)}
    sizes = {size(icons.darkMode.ico.size)}
    media = "(prefers-color-scheme: dark)"
  />
}

{/* Dark Mode SVG */}
{icons.darkMode?.svg && 
  <link 
    rel   = "icon"
    type  = "image/svg+xml"
    href  = {href(icons.darkMode.svg.path)}
    sizes = {size(icons.darkMode.svg.size)}
    media = "(prefers-color-scheme: dark)"
  />
}

{/* Dark Mode PNGs */}
{icons.darkMode?.png && (Array.isArray(icons.darkMode.png) 
  ? icons.darkMode.png : [icons.darkMode.png]).map(png => 
  <link 
    rel   = "icon"
    type  = "image/png"
    href  = {href(png.path)}
    sizes = {size(png.size)}
    media = "(prefers-color-scheme: dark)"
  />
)}